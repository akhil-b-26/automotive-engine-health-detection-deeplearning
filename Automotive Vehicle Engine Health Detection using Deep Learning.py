# -*- coding: utf-8 -*-
"""Engine Health Detection_ DL PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18301v9XxOS3CliVAs3gZRsrPUr0HGGuU
"""

# Import necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay
from sklearn.preprocessing import StandardScaler
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

# Load the data
data = pd.read_csv("/content/engine_health_dataset_corrected_new.csv")

# Data overview
data.info()

data .head()

data.describe()

# Data visualization
sns.histplot(data[data['Engine Condition'] == 0]['Engine rpm'], color='red')
sns.histplot(data[data['Engine Condition'] == 1]['Engine rpm'], color='blue')
plt.legend(labels=["Engine Condition = 0", "engine condition = 1"])
plt.title('Engine rpm', fontsize=18)

# Repeat similar plots for other features
sns.histplot(data[data['Engine Condition'] == 0]['lub oil pressure'], color='red')
sns.histplot(data[data['Engine Condition'] == 1]['lub oil pressure'], color='blue')
plt.legend(labels=["Engine Condition = 0", "Engine Condition = 1"])
plt.title('Lub oil pressure', fontsize=18)

sns.histplot(data[data['Engine Condition'] == 0]['fuel pressure'], color='red')
sns.histplot(data[data['Engine Condition'] == 1]['fuel pressure'], color='blue')
plt.legend(labels=["Engine Condition = 0", "Engine Condition = 1"])
plt.title('Fuel pressure', fontsize=18)

# Additional feature plots (Coolant pressure, lub oil temp, Coolant temp, etc.)
# Correlation analysis
corr = data.corr()
sns.heatmap(corr, annot=True)
plt.title('Correlation', fontsize=18)

# Train-validation-test split
X = data.drop('Engine Condition', axis=1)
y = data['Engine Condition']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.12, random_state=42)
X_validation, X_test, y_validation, y_test = train_test_split(X_test, y_test, test_size=0.33, random_state=42)

# Display dataset shapes
print("train set shape:", X_train.shape)
print("validation set shape:", X_validation.shape)
print("test set shape:", X_test.shape)

# Normalize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_validation = scaler.transform(X_validation)
X_test = scaler.transform(X_test)

# Deep Learning Model - Neural Network
model = Sequential()
model.add(Dense(128, input_dim=X_train.shape[1], activation='relu'))  # Increased number of neurons
model.add(Dropout(0.5))  # Increased dropout rate to prevent overfitting
model.add(Dense(64, activation='relu'))  # Additional hidden layer
model.add(Dropout(0.5))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))  # Output layer for binary classification

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, validation_data=(X_validation, y_validation), epochs=50, batch_size=32)

# Evaluate model on the test set
y_pred = (model.predict(X_test) > 0.5).astype("int32")
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)

cm = confusion_matrix(y_test, y_pred)
ConfusionMatrixDisplay(confusion_matrix=cm).plot()

# Function to predict engine condition
def check_engine_condition(new_input):
    new_input = scaler.transform([new_input])
    prediction = model.predict(new_input)
    return "Healthy" if prediction[0] >= 0.5 else "Unhealthy"

new_input1 = [2166,26.6,40.4,14.9,187.9,204.3]
new_input2 = [1951.4,2.8,50.1,14.1,190,209.4]
  # Modify these values as needed
result1 = check_engine_condition(new_input1)
print("The engine is:", result1)
result2 = check_engine_condition(new_input2)
print("The engine is:", result2)